// Edit only the code, do not open and save from TSE.
// See the file "tse_component_edit.tlib" if you want to edit this component on TSE.
library "OpenDSS" {

    component Subsystem Root {

        component Subsystem "Capacitor Bank" {
            layout = static
            label = "C"
            component "core/Capacitor" Ca {
                capacitance = "C"
            }
            [
                position = 8112, 8096
                rotation = down
            ]

            component "core/Capacitor" Cb {
                capacitance = "C"
            }
            [
                position = 8112, 8192
                rotation = down
            ]

            component "core/Capacitor" Cc {
                capacitance = "C"
            }
            [
                position = 8112, 8288
                rotation = down
            ]

            port A1 {
                position = -32, -32
                kind = pe
            }
            [
                position = 8392, 8096
                hide_name = True
                rotation = down
            ]

            port B1 {
                position = 0, -32
                kind = pe
            }
            [
                position = 8392, 8192
                hide_name = True
                rotation = down
            ]

            port C1 {
                position = 32, -32
                kind = pe
            }
            [
                position = 8392, 8288
                hide_name = True
                rotation = down
            ]

            junction j pe
            [
                position = 7992, 8192
            ]

            connect Ca.p_node A1 as Connection26
            connect j Ca.n_node as Connection27
            connect j Cb.n_node as Connection28
            connect j Cc.n_node as Connection29
            connect B1 Cb.p_node as b1_conn
            connect Cc.p_node C1 as Connection30

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br>Three-Phase Capacitor Bank.</br></p></body></html>"
                help_file = "help/OpenDSSManual.pdf#page=171"

                sld_mode {
                    label = "Single-line representation"
                    widget = checkbox
                    type = bool
                    default_value = True
                    group = "General"

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)

                        if new_value != old_value:
                            comp_script.topology_dynamics(mdl, container_handle, prop_handle)
                        mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)
                    ENDCODE
                }

                sld_1ph_pick {
                    label = "connected phase"
                    widget = combo
                    combo_values = "A", "B", "C"
                    type = string
                    default_value = "A"
                    group = "General"
                    no_evaluate
                    nonvisible

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)

                        if new_value != old_value:
                            comp_script.topology_dynamics(mdl, container_handle, prop_handle)
                        mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)
                    ENDCODE
                }

                sld_2ph_pick {
                    label = "connected phases"
                    widget = combo
                    combo_values = "A and B", "B and C", "A and C"
                    type = string
                    default_value = "A and B"
                    group = "General"
                    no_evaluate
                    nonvisible

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)

                        if new_value != old_value:
                            comp_script.topology_dynamics(mdl, container_handle, prop_handle)
                        mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)
                    ENDCODE
                }

                tp_connection {
                    label = "Connection"
                    widget = combo
                    combo_values = "Y - Grounded", "Y", "Î”", "In series"
                    type = string
                    default_value = "Y - Grounded"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.topology_dynamics(mdl, container_handle, prop_handle)
                        mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)
                    ENDCODE
                }

                global_basefreq {
                    label = "Global base frequency"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)
                    ENDCODE

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_frequency_property(mdl, container_handle)
                    ENDCODE
                }

                baseFreq {
                    label = "Base frequency"
                    previous_names = "BaseFreq"
                    widget = edit
                    type = generic
                    default_value = "60"
                    unit = "Hz"
                    nonvisible
                }

                phases {
                    label = "Phases"
                    widget = combo
                    combo_values = "3", "2", "1"
                    type = string
                    default_value = "3"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.topology_dynamics(mdl, container_handle, prop_handle)
                        mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle)
                    ENDCODE
                }

                Kv {
                    label = "kV"
                    widget = edit
                    type = generic
                    default_value = "12.47"
                    unit = "kV"
                }

                Kvar {
                    label = "kVar"
                    widget = edit
                    type = generic
                    default_value = "600"
                    unit = "kVAr"
                }

                C {
                    label = "C"
                    widget = edit
                    type = generic
                    default_value = "1e-6"
                    nonvisible
                }

                enable_monitoring {
                    label = "Enable monitoring"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Monitoring"
                    no_evaluate
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()

                ENDCODE

                CODE init
                    import importlib

                    import dss_thcc_lib.component_scripts.comp_capacitor as comp_script

                    importlib.reload(comp_script)
                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    comp_script.define_icon(mdl, item_handle)

                    comp_script.retro_compatibility(mdl, item_handle)

                ENDCODE

                CODE pre_compile
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.update_frequency_property(mdl, item_handle)
                    comp_script.calculate_c(mdl, item_handle)
                ENDCODE

                CODE define_icon
                    import dss_thcc_lib.component_scripts.comp_capacitor as comp_script
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE
            }
        }
        [
            position = 4472, 4320
            scale = 1, 1
            size = 96, 64
        ]

    }

}
