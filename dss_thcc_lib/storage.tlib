// Edit only the code, do not open and save from TSE.
// See the file "tse_component_edit.tlib" if you want to edit this component on TSE.
library "OpenDSS" {

    component Subsystem Root {

        component Subsystem Storage {
            layout = static
            component "core/Constant" chtrigger {
                execution_rate = "execution_rate"
                value = "chargetrigger"
            }
            [
                position = 8200, 7416
            ]

            component "core/Constant" dchtrigger {
                execution_rate = "execution_rate"
                value = "dischargetrigger"
            }
            [
                position = 8272, 7368
            ]

            component "core/C function" "Dispatch kW Reference Calculation" {
                input_terminals = "real loadshape_value;inherit kwrated;real dchtrigger;real chtrigger;int dispatch_mode;real pct_charge;real pct_discharge;"
                input_terminals_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit;inherit"
                input_terminals_feedthrough = "True;True;True;True;True;True;True"
                input_terminals_show_labels = "True;True;True;True;True;True;True"
                output_fnc = "/*Begin code section*/
if (dispatch_mode == 1 || dispatch_mode == 2 || dispatch_mode == 3){
    // Discharge mode
    if (loadshape_value > dchtrigger)
        {
            close_contactor = 1;
            p_inv = kwrated*1000*pct_discharge/100;
            //p_bat = kwrated*1000*pct_discharge/100;
        }
    // Charge mode
    else if (loadshape_value < chtrigger)
        {
            close_contactor = 1;
            p_inv = -kwrated*1000*pct_charge/100;
            //p_bat = -kwrated*1000*pct_charge/100;
        }
    // Idle mode
    else
        {
            close_contactor = 0;
            p_inv = -kwrated*1000*pct_idlingkw/100;
            //p_bat = 0;
        }
}
else if (dispatch_mode == 4 || dispatch_mode == 5 || dispatch_mode == 6){
    // Idle mode
    if (loadshape_value == -pct_idlingkw/100)
        {
            close_contactor = 0;
           // p_inv = -kwrated*1000*pct_idlingkw/100;
            //p_bat = 0;
        }
    else
        {
            close_contactor = 1;
            //p_inv = loadshape_value*kwrated*1000;
            //p_bat = loadshape_value*kwrated*1000;
        }
    p_inv = loadshape_value*kwrated*1000;
}
/*End code section*/"
                output_terminals = "real close_contactor;real p_inv;"
                output_terminals_dimensions = "inherit;inherit"
                output_terminals_feedthrough = "True;True"
                output_terminals_show_labels = "True;True"
                parameters = "real pct_idlingkw;"
            }
            [
                position = 8464, 7416
                size = 272, 360
            ]

            component "core/Probe" "Enable Inverter" {
            }
            [
                position = 8704, 7320
            ]

            component "core/Simple Battery inverter (Average)" "Simple Battery inverter (Average)1" {
                Cf = "inv_cf"
                Ki = "inv_ki"
                Kp = "inv_kp"
                L = "inv_l"
                R = "inv_r"
                Rf = "inv_rf"
                Sn = "4*kva*1000"
                Ts = "execution_rate"
            }
            [
                position = 7768, 8312
                scale = -1, 1
                size = 288, 239
            ]

            component Subsystem "Inverter Power Reference" {
                layout = dynamic
                component Subsystem "kvar calculation" {
                    layout = dynamic
                    component "core/Multiport signal switch" kVAr {
                        number_of_input_terminals = "6"
                    }
                    [
                        position = 8872, 8240
                    ]

                    component "core/Constant" "unit pf" {
                        execution_rate = "execution_rate"
                        value = "0"
                    }
                    [
                        position = 8664, 8208
                    ]

                    component "core/Constant" kvar_kvar {
                        execution_rate = "execution_rate"
                        value = "kvar*1000"
                    }
                    [
                        position = 8664, 8352
                    ]

                    component "core/Gain" Gain1 {
                        gain = "np.sqrt(1/(pf*pf)-1)"
                    }
                    [
                        position = 8752, 8272
                    ]

                    component "core/Constant" kwrated {
                        execution_rate = "execution_rate"
                        value = "kwrated*1000"
                    }
                    [
                        position = 8664, 8272
                    ]

                    port dispatch_int {
                        position = left:2
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8824, 8152
                        rotation = right
                    ]

                    port kvar_out {
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8952, 8240
                    ]

                    junction Junction1 sp
                    [
                        position = 8808, 8208
                    ]

                    junction Junction2 sp
                    [
                        position = 8832, 8272
                    ]

                    junction Junction3 sp
                    [
                        position = 8800, 8288
                    ]

                    connect kvar_out kVAr.out as Connection47
                    connect dispatch_int kVAr.ctrl as Connection74
                    connect kwrated.out Gain1.in as Connection101
                    connect kVAr.in Junction1 as Connection103
                    connect Junction1 "unit pf.out" as Connection104
                    connect kVAr.in3 Junction1 as Connection105
                    connect Gain1.out Junction2 as Connection107
                    connect Junction2 kVAr.in1 as Connection108
                    connect kVAr.in4 Junction2 as Connection109
                    connect kvar_kvar.out Junction3 as Connection111
                    [
                        position = 0, 0
                        breakpoints = 8800, 8352
                    ]
                    connect Junction3 kVAr.in2 as Connection112
                    [
                        position = 0, 0
                        breakpoints = 8800, 8240
                    ]
                    connect kVAr.in5 Junction3 as Connection113
                }
                [
                    position = 7448, 8224
                    size = 120, 80
                ]

                component "core/Product" Product16 {
                    signs = "/*"
                }
                [
                    position = 7176, 7760
                ]

                component "core/Constant" vmax {
                    execution_rate = "execution_rate"
                    value = "kv*1000*vmaxpu"
                }
                [
                    position = 6928, 7648
                ]

                component "core/Constant" vmin {
                    execution_rate = "execution_rate"
                    value = "kv*1000*vminpu"
                }
                [
                    position = 6928, 7712
                ]

                component "core/Signal switch" "Signal switch4" {
                    threshold = "kv*1000"
                }
                [
                    position = 7024, 7680
                ]

                component "core/Product" Product20 {
                }
                [
                    position = 7616, 7912
                ]

                component "core/Product" Product21 {
                }
                [
                    position = 7680, 8216
                ]

                component "core/Signal switch" "Signal switch2" {
                    threshold = "0.1"
                }
                [
                    position = 7448, 7776
                ]

                component Subsystem "Constant Z mode check" {
                    layout = dynamic
                    component "core/Constant" vmaxpu {
                        execution_rate = "execution_rate"
                        value = "vmaxpu*kv*1000"
                    }
                    [
                        position = 8088, 8152
                    ]

                    component "core/Constant" vminpu {
                        execution_rate = "execution_rate"
                        value = "vminpu*kv*1000"
                    }
                    [
                        position = 8088, 8248
                    ]

                    component "core/Relational operator" "Relational operator1" {
                        relational_op = ">"
                    }
                    [
                        position = 8184, 8144
                    ]

                    component "core/Relational operator" "Relational operator2" {
                        relational_op = "<"
                    }
                    [
                        position = 8184, 8240
                    ]

                    component "core/Logical operator" "Logical operator1" {
                        operator = "OR"
                    }
                    [
                        position = 8296, 8192
                    ]

                    port v_line {
                        position = left:1
                        kind = sp
                        direction =  out
                        sp_type {
                            default = auto
                            readonly = True
                        }
                    }
                    [
                        position = 8088, 8080
                    ]

                    port constant_z_mode {
                        position = right:1
                        kind = sp
                        direction =  in
                        sp_type {
                            default = inherit
                            readonly = True
                        }
                    }
                    [
                        position = 8408, 8192
                    ]

                    junction Junction560 sp
                    [
                        position = 8120, 8136
                    ]

                    connect Junction560 v_line as Connection2884
                    connect "Logical operator1.out" constant_z_mode as Connection2885
                    connect vmaxpu.out "Relational operator1.in1" as Connection2877
                    connect vminpu.out "Relational operator2.in1" as Connection2878
                    connect "Relational operator1.in" Junction560 as Connection2879
                    connect "Relational operator2.in" Junction560 as Connection2881
                    connect "Logical operator1.in" "Relational operator1.out" as Connection2882
                    connect "Relational operator2.out" "Logical operator1.in1" as Connection2883
                    [
                        position = 0, 0
                        breakpoints = 8216, 8240; 8216, 8200
                    ]
                }
                [
                    position = 7032, 7520
                    size = 152, 88
                ]

                component "core/Probe" ctZ {
                }
                [
                    position = 7496, 7520
                ]

                component "core/Constant" const_p_mult {
                    execution_rate = "execution_rate"
                }
                [
                    position = 7344, 7840
                ]

                component "core/Probe" ctz_multiplier {
                }
                [
                    position = 7392, 7696
                ]

                component "core/Data Type Conversion" "Data Type Conversion1" {
                }
                [
                    position = 7792, 8216
                ]

                component "core/Probe" "Inverter P Reference" {
                }
                [
                    position = 7712, 7832
                    rotation = left
                ]

                component "core/Probe" "Inverter Q Reference" {
                }
                [
                    position = 8392, 8288
                    rotation = right
                ]

                component "core/Product" Product23 {
                }
                [
                    position = 7272, 7760
                ]

                component "core/Gain" Gain3 {
                    gain = "-1"
                }
                [
                    position = 8112, 8216
                ]

                port dispatch_mode_int {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7296, 8224
                ]

                port v_line {
                    position = left:2
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 6720, 7872
                ]

                port dss_kw {
                    position = left:3
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7464, 7920
                ]

                port ctz_p_mult {
                    position = auto:auto
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 7592, 7704
                ]

                port inv_p {
                    position = auto:auto
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 7760, 7912
                ]

                port inv_q {
                    position = auto:auto
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8448, 8216
                ]

                junction Junction562 sp
                [
                    position = 7448, 7520
                ]

                junction Junction563 sp
                [
                    position = 6800, 7616
                ]

                junction Junction564 sp
                [
                    position = 7536, 7904
                ]

                junction Junction580 sp
                [
                    position = 7536, 7776
                ]

                junction Junction583 sp
                [
                    position = 6800, 7872
                ]

                junction Junction584 sp
                [
                    position = 7344, 7760
                ]

                junction Junction585 sp
                [
                    position = 7224, 7760
                ]

                junction Junction587 sp
                [
                    position = 8392, 8216
                ]

                junction Junction588 sp
                [
                    position = 7712, 7912
                ]

                comment Comment8 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Multiplier</p></body></html> ENDCOMMENT
                [
                    position = 7552, 7656
                ]

                connect dispatch_mode_int "kvar calculation.dispatch_int" as Connection3112
                connect vmax.out "Signal switch4.in" as Connection3155
                connect vmin.out "Signal switch4.in1" as Connection3156
                connect Product21.in1 "kvar calculation.kvar_out" as Connection3178
                connect "Constant Z mode check.constant_z_mode" Junction562 as Connection2900
                [
                    position = 0, 0
                ]
                connect ctZ.in Junction562 as Connection2902
                connect "Signal switch4.in2" Junction563 as Connection3183
                [
                    position = 0, 0
                    breakpoints = 7024, 7616
                ]
                connect "Constant Z mode check.v_line" Junction563 as Connection3185
                connect const_p_mult.out "Signal switch2.in1" as Connection3188
                connect Product20.in Junction564 as Connection3189
                connect "Data Type Conversion1.in" Product21.out as Connection3208
                connect "Signal switch2.out" Junction580 as Connection3492
                connect Junction580 Junction564 as Connection3493
                connect v_line Junction583 as Connection3512
                connect Junction583 Junction563 as Connection3513
                [
                    position = 0, 0
                    breakpoints = 6800, 7872; 6800, 7872; 6800, 7872; 6800, 7872; 6800, 7832; 6800, 7712; 6800, 7688
                ]
                connect Product16.in1 Junction583 as Connection3514
                [
                    position = 0, 0
                    breakpoints = 7136, 7872; 6800, 7872
                ]
                connect Product16.in "Signal switch4.out" as Connection3515
                [
                    position = 0, 0
                    breakpoints = 7136, 7744; 7136, 7680
                ]
                connect ctz_multiplier.in Junction584 as Connection3517
                connect Junction584 "Signal switch2.in" as Connection3518
                [
                    position = 0, 0
                    breakpoints = 7344, 7760
                ]
                connect Product23.out Junction584 as Connection3519
                connect Product16.out Junction585 as Connection3521
                connect Junction585 Product23.in1 as Connection3522
                connect Product23.in Junction585 as Connection3523
                connect "Inverter Q Reference.in" Junction587 as Connection3529
                connect inv_q Junction587 as Connection3531
                connect Junction580 ctz_p_mult as Connection3552
                [
                    position = 0, 0
                    breakpoints = 7536, 7776; 7536, 7704
                ]
                connect Junction587 Gain3.out as Connection3577
                connect Gain3.in "Data Type Conversion1.out" as Connection3578
                connect "Signal switch2.in2" Junction562 as Connection3579
                [
                    position = 0, 0
                    breakpoints = 7448, 7584
                ]
                connect dss_kw Product20.in1 as Connection3600
                connect Product21.in Junction564 as Connection3623
                [
                    position = 0, 0
                    breakpoints = 7536, 8072; 7536, 8056; 7536, 8032
                ]
                connect "Inverter P Reference.in" Junction588 as Connection3854
                connect Junction588 inv_p as Connection3855
                [
                    position = 0, 0
                    breakpoints = 7712, 7912; 7712, 7912; 7712, 7912; 7712, 7912; 7712, 7912; 7712, 7912; 7712, 7912
                ]
                connect Product20.out Junction588 as Connection3856
            }
            [
                position = 7704, 7952
                size = 144, 176
            ]

            component "core/Probe" Vline {
            }
            [
                position = 7424, 7872
                rotation = left
            ]

            component "core/Probe" dss_inv_ref {
            }
            [
                position = 8736, 7576
            ]

            component Subsystem "Active status" {
                layout = dynamic
                component "core/Data Type Conversion" bool_to_real {
                }
                [
                    position = 8296, 8192
                ]

                component "core/Logical operator" "Logical operator1" {
                }
                [
                    position = 8192, 8192
                ]

                port In2 {
                    position = left:2
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8072, 8240
                ]

                port In1 {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8072, 8144
                ]

                port Out3 {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8384, 8192
                ]

                connect "Logical operator1.in" In1 as Connection2
                connect "Logical operator1.in1" In2 as Connection1
                connect "Logical operator1.out" bool_to_real.in as Connection3
                connect bool_to_real.out Out3 as Connection4
            }
            [
                position = 7696, 7696
                size = 104, 96
            ]

            component "core/Probe" "Battery Active" {
            }
            [
                position = 7864, 7632
            ]

            component "core/Three-phase Meter" "Three-phase Meter1" {
                P_meas = "True"
                Ts = "execution_rate"
                VAB = "True"
                VBC = "True"
                VCA = "True"
                VLL_avg_rms = "True"
                VLL_rms = "True"
                freq = "True"
            }
            [
                position = 7240, 8312
                scale = -1, 1
                size = 56, 240
            ]

            component "core/Meter Split" "Meter Split1" {
                power_p = "True"
                power_pf = "True"
                power_q = "True"
                van = "False"
                vbn = "False"
                vcn = "False"
                vll_rms = "True"
            }
            [
                position = 7320, 8008
                size = 88, 200
            ]

            component "core/Probe" P {
            }
            [
                position = 7432, 7984
            ]

            component "core/Probe" Q {
            }
            [
                position = 7456, 8032
            ]

            component "core/Probe" pf {
            }
            [
                position = 7488, 8080
            ]

            component Subsystem "Dispatch Mode Integer" {
                layout = dynamic
                component "core/Constant" kw_mode {
                    execution_rate = "execution_rate"
                    signal_type = "int"
                    value = "dispatch_mode_int"
                }
                [
                    position = 8352, 8168
                ]

                port dispatch_mode_int {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8440, 8168
                ]

                connect dispatch_mode_int kw_mode.out as Connection95

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                    dispatch_mode_int {
                        label = "Dispatch Mode"
                        widget = edit
                        type = generic
                        default_value = "1"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        comp_script = return_comp_script(mdl, item_handle)
                        comp_script.read_loadshape_from_json(mdl, item_handle)

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE init
                    ENDCODE

                    CODE pre_compile
                    ENDCODE
                }
            }
            [
                position = 7944, 7464
                size = 152, 56
            ]

            component "core/Constant" pct_charge {
                execution_rate = "execution_rate"
                value = "pct_charge"
            }
            [
                position = 8200, 7512
            ]

            component "core/Constant" pct_discharge {
                execution_rate = "execution_rate"
                value = "pct_discharge"
            }
            [
                position = 8272, 7560
            ]

            component "core/Constant" kwrated {
                execution_rate = "execution_rate"
                value = "kwrated"
            }
            [
                position = 8200, 7320
            ]

            component Subsystem "Battery Energy" {
                layout = dynamic
                component "core/Integrator" Energy {
                    init_value = "pct_stored/100*kwhrated*1000"
                    limit_lower = "kwhrated*1000*pct_reserve/100"
                    limit_output = "True"
                    limit_upper = "kwhrated*1000"
                }
                [
                    position = 8656, 8288
                ]

                component "core/Probe" SOC {
                }
                [
                    position = 9024, 8224
                ]

                component "core/Gain" Gain3 {
                    gain = "100/(kwhrated*1000)"
                }
                [
                    position = 8864, 8224
                ]

                component "core/Signal switch" "Signal switch6" {
                    criterion = "ctrl >= threshold"
                    threshold = "0"
                }
                [
                    position = 8088, 8296
                ]

                component "core/Gain" Gain4 {
                    gain = "-1"
                }
                [
                    position = 8560, 8288
                ]

                component "core/Product" Product1 {
                }
                [
                    position = 7464, 8128
                ]

                component "core/Gain" inv_eff {
                }
                [
                    position = 7576, 8128
                ]

                component "core/Product" Product2 {
                }
                [
                    position = 8464, 8288
                ]

                component "core/Step" Step1 {
                    execution_rate = "execution_rate"
                }
                [
                    position = 8384, 8240
                ]

                component "core/C function" "C function1" {
                    global_variables = "int old_point;"
                    init_fnc = "/*Begin code section*/
kw = p_in;
/*End code section*/"
                    input_terminals = "int load_point;inherit p_in;int idle_signal;int mode_int;"
                    input_terminals_dimensions = "inherit;inherit;inherit;inherit"
                    input_terminals_feedthrough = "True;True;True;True"
                    input_terminals_show_labels = "False;False;False;False"
                    output_fnc = "/*Begin code section*/
if (mode_int == 1){
    // Loadshape time mode
    // input is the time
    if (load_point < 1){kw = 0;}
    else{
        if (load_point != old_point){
            kw = p_in;
            old_point = load_point;
            //kw = p_in*kwrated*1000;
        }
    }
}
else{
    // Loadshape index mode
    // input is the index
    kw = p_in;
}


kw = kw * idle_signal;
/*End code section*/"
                    output_terminals = "real kw;"
                    output_terminals_dimensions = "1"
                    output_terminals_feedthrough = "True"
                    output_terminals_show_labels = "False"
                    parameters = "real kwrated;"
                }
                [
                    position = 7080, 8056
                    size = 120, 168
                ]

                component "core/Constant" idle_losses {
                    execution_rate = "execution_rate"
                    value = "kwrated*1000*pct_idlingkw/100"
                }
                [
                    position = 7392, 8392
                ]

                component "core/Product" Product3 {
                }
                [
                    position = 7528, 8440
                ]

                component "core/Probe" p_ch_dch {
                }
                [
                    position = 8272, 8208
                ]

                component "core/Probe" p_idl_losses {
                }
                [
                    position = 7712, 8440
                ]

                component "core/Probe" pmult {
                }
                [
                    position = 7464, 8216
                ]

                component "core/Relational operator" "Relational operator1" {
                    relational_op = "<"
                }
                [
                    position = 8944, 8640
                ]

                component "core/Constant" reserve {
                    execution_rate = "execution_rate"
                    value = "pct_reserve/100"
                }
                [
                    position = 8752, 8504
                ]

                component "core/Relational operator" "Relational operator2" {
                    relational_op = "!="
                }
                [
                    position = 8896, 8752
                ]

                component "core/Constant" zero {
                    execution_rate = "execution_rate"
                    value = "0"
                }
                [
                    position = 8752, 8760
                ]

                component "core/Sum" Sum7 {
                    signs = "++"
                }
                [
                    position = 7736, 8248
                ]

                component "core/Constant" reserve1 {
                    execution_rate = "execution_rate"
                    value = "100"
                }
                [
                    position = 8752, 8648
                ]

                component "core/Relational operator" "Relational operator3" {
                    relational_op = ">"
                }
                [
                    position = 8944, 8496
                ]

                component "core/Logical operator" "Logical operator1" {
                    inputs = "3"
                }
                [
                    position = 9056, 8576
                ]

                component "core/Gain" charge_gain {
                    gain = "pct_effcharge/100"
                }
                [
                    position = 7952, 8360
                ]

                component "core/Gain" discharge_gain {
                    gain = "1/(pct_effdischarge/100 + 1e-7)"
                }
                [
                    position = 7944, 8136
                ]

                port bat_energy {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8944, 8288
                ]

                port ctz_p_mult {
                    position = left:3
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 7216, 8136
                ]

                port p_in {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 6872, 8040
                ]

                port bat_active {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 9184, 8576
                ]

                port bat_soc {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8960, 8168
                ]

                port load_point {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 6920, 7992
                ]

                port idle_signal {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 6928, 8072
                ]

                port mode {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 6864, 8120
                ]

                tag Tag1 {
                    value = "bat_active"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 9184, 8712
                    hide_name = True
                    size = 60, 20
                ]

                tag Tag3 {
                    value = "bat_active"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 7384, 8480
                    hide_name = True
                    size = 60, 20
                ]

                tag Tag4 {
                    value = "(C function1)(kw)"
                    scope = local
                    kind = sp
                    direction = out
                }
                [
                    position = 8808, 8744
                    hide_name = True
                    size = 60, 20
                ]

                tag Tag7 {
                    value = "(C function1)(kw)"
                    scope = local
                    kind = sp
                    direction = in
                }
                [
                    position = 7512, 8024
                    hide_name = True
                    size = 60, 20
                ]

                junction Junction656 sp
                [
                    position = 7384, 8136
                ]

                junction Junction657 sp
                [
                    position = 8176, 8296
                ]

                junction Junction663 sp
                [
                    position = 7648, 8440
                ]

                junction Junction666 sp
                [
                    position = 8896, 8224
                ]

                junction Junction667 sp
                [
                    position = 8896, 8488
                ]

                junction Junction668 sp
                [
                    position = 9120, 8576
                ]

                junction Junction673 sp
                [
                    position = 8816, 8288
                ]

                junction Junction680 sp
                [
                    position = 7872, 8136
                ]

                junction Junction681 sp
                [
                    position = 7872, 8248
                ]

                junction Junction682 sp
                [
                    position = 7296, 8056
                ]

                comment Comment2 START <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><html><head><meta name="qrichtext" content="1" /><style type="text/css">p, li { white-space: pre-wrap; }</style></head><body style=" font-family:'Arial'; font-size:12pt; font-weight:400; font-style:normal;"><p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Not implemented</p></body></html> ENDCOMMENT
                [
                    position = 7520, 8072
                ]

                connect Gain4.out Energy.in as Connection3677
                connect inv_eff.in Product1.out as Connection3690
                [
                    position = 0, 0
                    breakpoints = 7544, 8128; 7528, 8128
                ]
                connect Step1.out Product2.in as Connection3696
                connect Product2.out Gain4.in as Connection3721
                [
                    position = 0, 0
                ]
                connect Junction656 Product1.in1 as Connection3774
                connect pmult.in Junction656 as Connection3775
                connect "Signal switch6.out" Junction657 as Connection3777
                connect Junction657 p_ch_dch.in as Connection3778
                [
                    position = 0, 0
                    breakpoints = 8176, 8296
                ]
                connect Product2.in1 Junction657 as Connection3779
                connect zero.out "Relational operator2.in1" as Connection3831
                connect p_idl_losses.in Junction663 as Connection3843
                connect Junction663 Product3.out as Connection3844
                [
                    position = 0, 0
                    breakpoints = 7640, 8440; 7640, 8440
                ]
                connect Gain3.out Junction666 as Connection3864
                connect Junction666 SOC.in as Connection3865
                [
                    position = 0, 0
                    breakpoints = 8896, 8224
                ]
                connect reserve.out "Relational operator3.in1" as Connection3867
                connect "Relational operator3.in" Junction667 as Connection3868
                connect Junction667 Junction666 as Connection3869
                connect "Relational operator1.in" Junction667 as Connection3870
                connect reserve1.out "Relational operator1.in1" as Connection3871
                connect "Relational operator3.out" "Logical operator1.in" as Connection3873
                connect "Relational operator1.out" "Logical operator1.in1" as Connection3874
                [
                    position = 0, 0
                    breakpoints = 8992, 8640; 8992, 8576
                ]
                connect "Logical operator1.out" Junction668 as Connection3875
                connect Junction668 Tag1 as Connection3876
                connect bat_active Junction668 as Connection3877
                connect Tag3 Product3.in1 as Connection3878
                connect "Relational operator2.out" "Logical operator1.in2" as Connection3880
                connect "Relational operator2.in" Tag4 as "(C function1)(kw)--1"
                connect "C function1.p_in" p_in as Connection3895
                connect "C function1.load_point" load_point as Connection3899
                connect "C function1.mode_int" mode as Connection3901
                connect Junction656 ctz_p_mult as Connection3906
                [
                    position = 0, 0
                    breakpoints = 7384, 8136; 7304, 8136
                ]
                connect Junction666 bat_soc as Connection3916
                [
                    position = 0, 0
                    breakpoints = 8896, 8224; 8896, 8168
                ]
                connect bat_energy Junction673 as Connection3919
                [
                    position = 0, 0
                    breakpoints = 8864, 8288
                ]
                connect Junction673 Gain3.in as Connection3920
                [
                    position = 0, 0
                    breakpoints = 8816, 8288
                ]
                connect Energy.out Junction673 as Connection3921
                connect charge_gain.out "Signal switch6.in1" as Connection3930
                connect discharge_gain.out "Signal switch6.in" as Connection3936
                connect Sum7.in inv_eff.out as Connection3952
                connect Sum7.in1 Junction663 as Connection3950
                connect Junction680 discharge_gain.in as Connection3960
                [
                    breakpoints = 7872, 8136
                ]
                connect Sum7.out Junction681 as Connection3961
                connect Junction681 charge_gain.in as Connection3962
                connect Junction680 Junction681 as Connection3963
                connect "Signal switch6.in2" Junction680 as Connection3964
                [
                    breakpoints = 8088, 8080; 8088, 8080; 8088, 8080; 7872, 8136; 7872, 8136; 7872, 8136
                ]
                connect "C function1.kw" Junction682 as Connection3965
                connect Junction682 Product1.in as Connection3966
                [
                    breakpoints = 7296, 8056; 7296, 8056; 7296, 8056
                ]
                connect Tag7 Junction682 as Connection3967
                connect idle_signal "C function1.idle_signal" as Connection3968
                [
                    breakpoints = 6976, 8072
                ]
                connect idle_losses.out Product3.in as Connection3969
            }
            [
                position = 8528, 8304
                size = 184, 216
            ]

            component "core/C function" "Disconnect if on reserve or charged" {
                input_terminals = "real energy;inherit kwhrated;inherit pct_reserve;inherit kwref;inherit active_inverter;"
                input_terminals_dimensions = "inherit;inherit;inherit;inherit;inherit"
                input_terminals_feedthrough = "True;True;True;True;True"
                input_terminals_show_labels = "True;True;True;True;True"
                output_fnc = "/*Begin code section*/
if (active_inverter){
    if (energy >= kwhrated*1000){
        if (kwref >= 0){
            connect_battery = 1;
        }
        else{
            connect_battery = 0;
        }
    }
    else if (energy <= kwhrated*1000*pct_reserve/100){
            if (kwref < 0){
                connect_battery = 1;
            }
            else{
                connect_battery = 0;
            }
        }
    else {
            connect_battery = 1;
        }
}
else{
    connect_battery = 0;
}
/*End code section*/"
                output_terminals = "real connect_battery;"
                output_terminals_dimensions = "inherit"
                output_terminals_feedthrough = "True"
                output_terminals_show_labels = "True"
            }
            [
                position = 7552, 7400
                size = 216, 280
            ]

            component "core/Constant" kwhrated {
                execution_rate = "execution_rate"
                value = "kwhrated"
            }
            [
                position = 7352, 7344
            ]

            component "core/Constant" pct_reserve {
                execution_rate = "execution_rate"
                value = "pct_reserve"
            }
            [
                position = 7352, 7400
            ]

            component "core/Termination" Termination2 {
            }
            [
                position = 7656, 8160
                rotation = left
            ]

            component Subsystem "Loadshape Point Calculator" {
                layout = dynamic
                component "core/Constant" loadshape {
                    execution_rate = "execution_rate"
                    value = "loadshape"
                }
                [
                    position = 8136, 8136
                ]

                component "core/Probe" "Loadshape Value" {
                }
                [
                    position = 8520, 8032
                ]

                component "core/Constant" time {
                    execution_rate = "execution_rate"
                    value = "T_Ts"
                }
                [
                    position = 8216, 8168
                ]

                component "core/Constant" mode_int {
                    execution_rate = "execution_rate"
                    value = "0"
                }
                [
                    position = 7992, 8216
                ]

                component "core/Data Type Conversion" toint {
                    output_type = "int"
                }
                [
                    position = 8216, 8248
                ]

                component "core/Probe" slope {
                }
                [
                    position = 8664, 8184
                ]

                component "core/Probe" "start index" {
                }
                [
                    position = 8600, 8232
                ]

                component "core/Probe" end_index {
                }
                [
                    position = 8472, 8280
                ]

                component "core/Advanced C function" "Advanced C function1" {
                    arb_defs = "/*Begin code section*/
double slopes[loadshape_n_points] = {0};
/*End code section*/"
                    global_variables = "real out_value;real ls_interval;int idx;real end_point;real bat_full;real bat_on_reserve;real saved_point;int old_index;"
                    init_fnc = "/*Begin code section*/
start_index = 0;
old_index = start_index;
end_index = 1;
idle_signal = 0;
/*End code section*/"
                    input_terminals = "real loadshape_array;inherit time_array;int input_mode;int input_idx;real input_time;real bat_soc;"
                    input_terminals_dimensions = "inherit;inherit;inherit;inherit;inherit;inherit"
                    input_terminals_feedthrough = "True;True;True;True;True;True"
                    input_terminals_show_labels = "True;True;True;True;True;True"
                    output_fnc = "/*Begin code section*/
if (bat_soc <= 1.001*pct_reserve){
    bat_full = 0;
    bat_on_reserve = 1;
    }
else if (bat_soc >= 99.999){
    bat_full = 1;
    bat_on_reserve = 0;
    }
else {
    bat_full = 0;
    bat_on_reserve = 0;
    }

if (input_mode == 0){
    // Loadshape index mode
    // input is the index

    // Limit the index values
    if (input_idx > loadshape_n_points - 1) {
        input_idx = loadshape_n_points - 1;
    }
    else if (input_idx < 0) {
        input_idx = 0;
    }

    out_value = loadshape_array[input_idx];
}
else if (input_mode == 1){
    // Time mode
    // input is the time

    if (input_time < 1) {
        // Preset value for the first step
        out_value = 0;
        saved_point = loadshape_array[0];
        }

    else{
        idle_signal = 1;

        if (loadshape_int == 0){
            // Variable time interval
            if (input_time >= (time_array[loadshape_n_points - 1])){
                start_index = loadshape_n_points - 1;
                end_index = 0;
                input_time = fmod(input_time, time_array[loadshape_n_points - 1]);
            }
            else{
                start_index = 0;
                end_index = 1;
                input_time = input_time;
            }
            for (idx = 0; idx < loadshape_n_points; idx++){
                if (input_time >= time_array[idx]){
                    start_index = idx;
                    end_index = start_index + 1;
                }
            }

            // If last index, next index should be 0
            if (start_index == (loadshape_n_points - 1)){
                end_index = 0;
                ls_interval = 1;
            }
            else{
                ls_interval = time_array[end_index] - time_array[start_index];
            }
        }
        else{
            // Fixed time interval
            input_time = fmod(input_time - 1, loadshape_int*loadshape_n_points);
            start_index = input_time / loadshape_int;
            end_index = start_index + 1;

            ls_interval = loadshape_int;
            if (start_index == (loadshape_n_points - 1)){
                end_index = 0;
            }
        }

        start_point = loadshape_array[start_index];
        if (start_point == 0){
            start_point = -pct_idlingkw/100;
            idle_signal = 0;
        }
        end_point = loadshape_array[end_index];
        if (end_point == 0){
            end_point = -pct_idlingkw/100;
        }

        slope = (end_point - start_point)/ls_interval;

        if (old_index != start_index){
            saved_point = out_value;
            old_index = start_index;
        }

         // If the battery will be full / on reserve on the next step, power reference becomes just the idle power
        if (((end_point >= -pct_idlingkw/100) & (bat_on_reserve == 1)) | ((end_point <= -pct_idlingkw/100) & (bat_full == 1))){
            end_point = -pct_idlingkw/100;
            //idle_signal = 0;
            //end_point = 0;
            //slope = (end_point - saved_point)/ls_interval;;
            //start_point = saved_point;
        }
        //else{
        slope = (end_point - saved_point)/ls_interval;
        start_point = saved_point;
        //}

        if (loadshape_int == 0){
            if (start_index == (loadshape_n_points - 1)){
                out_value = start_point + slope * input_time;
            }
            else{
                out_value = start_point + slope * (input_time - time_array[start_index]);
            }
        }
        else{
            out_value = start_point + slope * (input_time - ls_interval * start_index);
        }
    }
}

// Saturation
if (out_value > 1) {
    out_value = 1;
}
else if (out_value < -1) {
    out_value = -1;
}

out = out_value;
/*End code section*/"
                    output_terminals = "real out;real slope;int start_index;int end_index;int idle_signal;real start_point;"
                    output_terminals_dimensions = "1;1;1;1;1;1"
                    output_terminals_feedthrough = "True;True;True;True;True;True"
                    output_terminals_show_labels = "True;True;True;True;True;True"
                    parameters = "int loadshape_n_points;int loadshape_int;real pct_idlingkw;real pct_reserve;"
                }
                [
                    position = 8336, 8232
                    size = 144, 240
                ]

                component "core/Probe" idle {
                }
                [
                    position = 8536, 8416
                ]

                component "core/Probe" end_point {
                }
                [
                    position = 8504, 8504
                ]

                port loadshape_value {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8520, 8136
                ]

                port input {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8136, 8248
                ]

                port end_point_to_bat {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8624, 8480
                ]

                port bat_soc {
                    position = left:1
                    kind = sp
                    direction =  out
                    sp_type {
                        default = auto
                        readonly = True
                    }
                }
                [
                    position = 8112, 8328
                ]

                port mode {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8080, 8184
                ]

                port idle_signal {
                    position = right:1
                    kind = sp
                    direction =  in
                    sp_type {
                        default = inherit
                        readonly = True
                    }
                }
                [
                    position = 8536, 8328
                ]

                junction Junction1 sp
                [
                    position = 8168, 8248
                ]

                junction Junction2 sp
                [
                    position = 8472, 8136
                ]

                junction Junction4 sp
                [
                    position = 8048, 8216
                ]

                junction Junction5 sp
                [
                    position = 8456, 8328
                ]

                junction Junction6 sp
                [
                    position = 8424, 8480
                ]

                connect "Advanced C function1.loadshape_array" loadshape.out as Connection39
                connect "Advanced C function1.time_array" time.out as Connection40
                connect "Advanced C function1.input_idx" toint.out as Connection42
                connect input Junction1 as Connection43
                connect Junction1 toint.in as Connection44
                [
                    position = 0, 0
                    breakpoints = 8168, 8248; 8184, 8248
                ]
                connect "Advanced C function1.input_time" Junction1 as Connection45
                connect loadshape_value Junction2 as Connection46
                connect Junction2 "Loadshape Value.in" as Connection47
                [
                    position = 0, 0
                    breakpoints = 8472, 8136; 8472, 8032
                ]
                connect "Advanced C function1.out" Junction2 as Connection48
                connect "Advanced C function1.slope" slope.in as Connection49
                connect end_index.in "Advanced C function1.end_index" as Connection55
                connect "Advanced C function1.input_mode" Junction4 as Connection60
                connect Junction4 mode_int.out as Connection61
                connect mode Junction4 as Connection62
                connect "Advanced C function1.idle_signal" Junction5 as Connection64
                connect Junction5 idle_signal as Connection65
                connect idle.in Junction5 as Connection66
                connect "Advanced C function1.bat_soc" bat_soc as Connection71
                [
                    position = 0, 0
                    breakpoints = 8168, 8328
                ]
                connect "start index.in" "Advanced C function1.start_index" as Connection73
                [
                    breakpoints = 8504, 8232
                ]
                connect end_point.in Junction6 as Connection74
                connect Junction6 "Advanced C function1.start_point" as Connection75
                connect end_point_to_bat Junction6 as Connection76
            }
            [
                position = 7928, 7320
                size = 152, 136
            ]

            component "core/Probe" "Battery Active1" {
            }
            [
                position = 7776, 7472
            ]

            component "core/Probe" "Battery Active2" {
            }
            [
                position = 7776, 7584
            ]

            component "core/Ground" gnd1 {
            }
            [
                position = 7240, 8504
            ]

            component "core/Voltage Source" Vs1 {
                init_const_value = "2*kv*1000*vmaxpu"
            }
            [
                position = 8264, 8312
                rotation = right
            ]

            component "core/Bus Join" "Bus Join1" {
                inputs = "3"
            }
            [
                position = 7840, 7952
            ]

            component "core/Constant" enable_inverter {
                execution_rate = "execution_rate"
            }
            [
                position = 8032, 7912
                rotation = down
                scale = 1, -1
            ]

            component "core/Current Measurement" iDC {
            }
            [
                position = 8080, 8216
                size = 64, 32
            ]

            port A1 {
                position = -32.0, -32.0
                kind = pe
            }
            [
                position = 7104, 8216
            ]

            port B1 {
                position = -32.0, 0.0
                kind = pe
            }
            [
                position = 7104, 8312
            ]

            port C1 {
                position = -32.0, 32.0
                kind = pe
            }
            [
                position = 7104, 8408
            ]

            port "Load point" {
                label = "t"
                position = -8.0, -44.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                    readonly = True
                }
            }
            [
                position = 7792, 7272
            ]

            tag Goto5 {
                value = "dss_p_inv"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8752, 7656
                size = 60, 20
            ]

            tag From4 {
                value = "dispatch_int"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 7888
                size = 68, 20
            ]

            tag Goto8 {
                value = "active_inverter"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8704, 7256
                size = 60, 20
            ]

            tag From7 {
                value = "active_inverter"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7568, 7664
                size = 69, 20
            ]

            tag From12 {
                value = "active_battery"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7568, 7728
                size = 60, 20
            ]

            tag Goto9 {
                value = "active_status"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7864, 7696
                size = 60, 20
            ]

            tag Goto10 {
                value = "dispatch_int"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8064, 7528
                rotation = right
                size = 60, 20
            ]

            tag From22 {
                value = "dss_p_inv"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7552, 8016
                size = 46, 20
            ]

            tag Goto11 {
                value = "bat_energy"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8720, 8216
                size = 60, 20
            ]

            tag From24 {
                value = "bat_energy"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7352, 7288
                size = 60, 20
            ]

            tag Goto4 {
                value = "active_battery"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7728, 7400
                size = 60, 20
            ]

            tag From3 {
                value = "dss_p_inv"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7352, 7456
                size = 46, 20
            ]

            tag From20 {
                value = "active_inverter"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7352, 7512
                size = 46, 20
            ]

            tag Tag11 {
                value = "(Inverter Power Reference)(ctz_p_mult)"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7888, 7888
                hide_name = True
                size = 60, 20
            ]

            tag Tag12 {
                value = "(Inverter Power Reference)(ctz_p_mult)"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8368, 8384
                hide_name = True
                size = 60, 20
            ]

            tag Goto13 {
                value = "load_p"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 7872, 7216
                hide_name = True
                size = 60, 20
            ]

            tag Goto14 {
                value = "end_point"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8072, 7304
                hide_name = True
                size = 60, 20
            ]

            tag Tag13 {
                value = "bat_active"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8720, 8304
                hide_name = True
                size = 60, 20
            ]

            tag Tag14 {
                value = "bat_next_soc"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 7768, 7368
                hide_name = True
                size = 60, 20
            ]

            tag Goto15 {
                value = "bat_next_soc"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8720, 8392
                size = 60, 20
            ]

            tag From30 {
                value = "load_p"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8368, 8264
                size = 60, 20
            ]

            tag Tag17 {
                value = "(Loadshape Point Calculator)(idle_signal)"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8368, 8304
                hide_name = True
                size = 60, 20
            ]

            tag Tag18 {
                value = "(Loadshape Point Calculator)(idle_signal)"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8072, 7368
                hide_name = True
                size = 60, 20
            ]

            tag Tag19 {
                value = "(Loadshape Point Calculator)(mode)"
                scope = local
                kind = sp
                direction = in
            }
            [
                position = 8072, 7336
                hide_name = True
                size = 60, 20
            ]

            tag Tag20 {
                value = "(Loadshape Point Calculator)(mode)"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8368, 8344
                hide_name = True
                size = 60, 20
            ]

            tag Tag24 {
                value = "dss_p_inv"
                scope = local
                kind = sp
                direction = out
            }
            [
                position = 8368, 8224
                hide_name = True
                size = 60, 20
            ]

            junction Junction581 sp
            [
                position = 7784, 7696
            ]

            junction Junction619 sp
            [
                position = 8640, 7256
            ]

            junction Junction622 sp
            [
                position = 8064, 7464
            ]

            junction Junction635 sp
            [
                position = 7680, 7400
            ]

            junction Junction636 sp
            [
                position = 7632, 7664
            ]

            junction Junction638 sp
            [
                position = 7424, 7936
            ]

            junction Junction640 sp
            [
                position = 7824, 7272
            ]

            junction Junction641 sp
            [
                position = 8640, 7576
            ]

            connect dchtrigger.out "Dispatch kW Reference Calculation.dchtrigger" as Connection26
            connect chtrigger.out "Dispatch kW Reference Calculation.chtrigger" as Connection27
            connect From12 "Active status.In2" as Connection2953
            connect "Active status.Out3" Junction581 as Connection3009
            connect Junction581 Goto9 as Connection3010
            connect "Battery Active.in" Junction581 as Connection3011
            connect "Three-phase Meter1.A+" "Simple Battery inverter (Average)1.A" as Connection3266
            connect "Simple Battery inverter (Average)1.B" "Three-phase Meter1.B+" as Connection3267
            connect "Simple Battery inverter (Average)1.C" "Three-phase Meter1.C+" as Connection3269
            connect "Meter Split1.Input" "Three-phase Meter1.Out" as Connection3271
            connect A1 "Three-phase Meter1.A-" as Connection3278
            connect C1 "Three-phase Meter1.C-" as Connection3281
            connect B1 "Three-phase Meter1.B-" as Connection3280
            connect Q.in "Meter Split1.POWER_Q" as Connection3282
            connect pf.in "Meter Split1.POWER_PF" as Connection3283
            connect pct_charge.out "Dispatch kW Reference Calculation.pct_charge" as Connection3295
            connect "Dispatch kW Reference Calculation.pct_discharge" pct_discharge.out as Connection3296
            connect kwrated.out "Dispatch kW Reference Calculation.kwrated" as Connection3297
            connect "Enable Inverter.in" Junction619 as Connection3316
            connect Junction619 Goto8 as Connection3317
            [
                position = 0, 0
            ]
            connect "Dispatch kW Reference Calculation.close_contactor" Junction619 as Connection3318
            connect "Dispatch Mode Integer.dispatch_mode_int" Junction622 as Connection3341
            connect Goto10 Junction622 as Connection3343
            connect From4 "Inverter Power Reference.dispatch_mode_int" as Connection3357
            connect kwhrated.out "Disconnect if on reserve or charged.kwhrated" as Connection2716
            connect pct_reserve.out "Disconnect if on reserve or charged.pct_reserve" as Connection2717
            connect From3 "Disconnect if on reserve or charged.kwref" as Connection3137
            connect From20 "Disconnect if on reserve or charged.active_inverter" as Connection3229
            connect From24 "Disconnect if on reserve or charged.energy" as Connection3448
            connect "Dispatch kW Reference Calculation.dispatch_mode" Junction622 as Connection3450
            [
                position = 0, 0
            ]
            connect Termination2.in "Simple Battery inverter (Average)1.Outputs" as Connection3451
            connect "Loadshape Point Calculator.loadshape_value" "Dispatch kW Reference Calculation.loadshape_value" as Connection3455
            connect "Disconnect if on reserve or charged.connect_battery" Junction635 as Connection3456
            connect Junction635 Goto4 as Connection3457
            [
                position = 0, 0
                breakpoints = 7664, 7400
            ]
            connect "Battery Active1.in" Junction635 as Connection3458
            connect From7 Junction636 as Connection3459
            connect Junction636 "Active status.In1" as Connection3460
            connect "Battery Active2.in" Junction636 as Connection3461
            connect gnd1.node "Three-phase Meter1.GND" as Connection3462
            connect Goto11 "Battery Energy.bat_energy" as Connection3472
            [
                position = 0, 0
            ]
            connect "Simple Battery inverter (Average)1.DC-" Vs1.n_node as Connection3530
            [
                position = 0, 0
                breakpoints = 8072, 8408; 8264, 8408
            ]
            connect From22 "Inverter Power Reference.dss_kw" as Connection3531
            connect "Meter Split1.VLL_RMS" Junction638 as Connection3537
            connect "Inverter Power Reference.v_line" Junction638 as Connection3539
            connect "Inverter Power Reference.ctz_p_mult" Tag11 as "(Inverter Power Reference)(ctz_p_mult)--1"
            connect Vline.in Junction638 as Connection3543
            connect Tag12 "Battery Energy.ctz_p_mult" as Connection3544
            connect "Load point" Junction640 as Connection3550
            connect Junction640 "Loadshape Point Calculator.input" as Connection3551
            connect Goto13 Junction640 as Connection3552
            connect P.in "Meter Split1.POWER_P" as Connection3553
            [
                position = 0, 0
                breakpoints = 7384, 7984
            ]
            connect "Bus Join1.in" enable_inverter.out as Connection3382
            [
                position = 0, 0
            ]
            connect "Bus Join1.in1" "Inverter Power Reference.inv_p" as Connection3554
            connect "Inverter Power Reference.inv_q" "Bus Join1.in2" as Connection3555
            connect "Simple Battery inverter (Average)1.Inputs" "Bus Join1.out" as Connection3560
            [
                position = 0, 0
                breakpoints = 7880, 8112
            ]
            connect "Simple Battery inverter (Average)1.DC+" iDC.p_node as Connection3565
            connect iDC.n_node Vs1.p_node as Connection3566
            connect "Loadshape Point Calculator.end_point_to_bat" Goto14 as Connection3568
            connect "Battery Energy.bat_active" Tag13 as "(Battery Energy)(bat_on_reserve)--1"
            connect Tag14 "Loadshape Point Calculator.bat_soc" as Connection3570
            connect Goto15 "Battery Energy.bat_soc" as Connection3571
            connect From30 "Battery Energy.load_point" as Connection3573
            connect "Battery Energy.idle_signal" Tag17 as "(Loadshape Point Calculator)(idle_signal)--1"
            connect "Loadshape Point Calculator.idle_signal" Tag18 as "(Loadshape Point Calculator)(idle_signal)--2"
            connect "Loadshape Point Calculator.mode" Tag19 as "(Loadshape Point Calculator)(mode)--1"
            connect "Battery Energy.mode" Tag20 as "(Loadshape Point Calculator)(mode)--2"
            connect dss_inv_ref.in Junction641 as Connection3590
            connect Junction641 Goto5 as Connection3591
            [
                position = 0, 0
                breakpoints = 8640, 7576; 8640, 7576
            ]
            connect "Dispatch kW Reference Calculation.p_inv" Junction641 as Connection3592
            connect Tag24 "Battery Energy.p_in" as Connection3593

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p>A detailed explanation of the OpenDSS Storage model can be found by clicking on the help button.</p><p>The Storage component time-domain model is comprised of an ideal battery and a Simple Battery inverter (average) from the Microgrid library.</p></body></html>"
                help_file = "help/Storage.pdf"

                dispatch_p {
                    label = "Dispatch P"
                    widget = combo
                    combo_values = "Default", "Follow"
                    type = string
                    default_value = "Default"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_dispatch_mode(mdl, container_handle)
                        mdl.refresh_icon(container_handle)
                    ENDCODE
                }

                dispatch_q {
                    label = "Dispatch Q"
                    widget = combo
                    combo_values = "Unit PF", "Constant PF", "Constant kVAr"
                    type = string
                    default_value = "Unit PF"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_dispatch_mode(mdl, container_handle)
                        mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.update_dispatch_mode(mdl, container_handle)
                        mdl.refresh_icon(container_handle)
                    ENDCODE
                }

                snap_status {
                    label = "Snap solve status"
                    widget = combo
                    combo_values = "Charging", "Discharging", "Idling"
                    type = string
                    default_value = "Charging"
                    no_evaluate
                }

                kv {
                    label = "Nominal voltage"
                    widget = edit
                    type = generic
                    default_value = "115"
                    unit = "kV"
                    group = "Ratings:3"
                }

                global_basefreq {
                    label = "Global base frequency"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Ratings:3"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.toggle_frequency_prop(mdl, container_handle)
                    ENDCODE

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if old_value == new_value:
                            comp_script.update_frequency_property(mdl, container_handle, init=True)
                        else:
                            comp_script.update_frequency_property(mdl, container_handle)
                    ENDCODE
                }

                baseFreq {
                    label = "Base frequency"
                    widget = edit
                    type = generic
                    default_value = "60"
                    unit = "Hz"
                    group = "Ratings:3"
                    nonvisible
                }

                kwrated {
                    label = "Rated kW"
                    widget = edit
                    type = generic
                    default_value = "25"
                    unit = "kW"
                    group = "Ratings:3"
                }

                kwhrated {
                    label = "Rated kWh"
                    widget = edit
                    type = generic
                    default_value = "50"
                    unit = "kWh"
                    group = "Ratings:3"
                }

                chargetrigger {
                    label = "ChargeTrigger"
                    widget = edit
                    type = generic
                    default_value = "0.2"
                }

                dischargetrigger {
                    label = "DischargeTrigger"
                    widget = edit
                    type = generic
                    default_value = "0.6"
                }

                pct_charge {
                    label = "%Charge"
                    widget = edit
                    type = generic
                    default_value = "100"
                    unit = "%"
                }

                pct_discharge {
                    label = "%Discharge"
                    widget = edit
                    type = generic
                    default_value = "100"
                    unit = "%"
                }

                pct_effcharge {
                    label = "Charge efficiency"
                    widget = edit
                    type = generic
                    default_value = "90"
                    unit = "%"
                    group = "Ratings:3"
                }

                pct_effdischarge {
                    label = "Discharge efficiency"
                    widget = edit
                    type = generic
                    default_value = "90"
                    unit = "%"
                    group = "Ratings:3"
                }

                kvar {
                    label = "Reactive power"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "kVAr"
                    group = "Ratings:3"
                    nonvisible
                }

                pf {
                    label = "Power factor"
                    widget = edit
                    type = generic
                    default_value = "1"
                    group = "Ratings:3"
                    nonvisible
                }

                pct_idlingkvar {
                    label = "%IdlingkVAr"
                    widget = edit
                    type = generic
                    default_value = "0"
                    unit = "%"
                    group = "Ratings:3"
                    nonvisible
                }

                pct_idlingkw {
                    label = "Idling losses"
                    widget = edit
                    type = generic
                    default_value = "1"
                    unit = "%"
                    group = "Ratings:3"
                }

                pct_reserve {
                    label = "Reserve mode SOC"
                    widget = edit
                    type = generic
                    default_value = "20"
                    unit = "%"
                    group = "Ratings:3"
                }

                load_loadshape {
                    label = "LoadShape object"
                    widget = button
                    type = generic
                    default_value = "Choose"
                    group = "Time Series Settings:2"
                    no_evaluate

                    CODE button_clicked
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.load_loadshape(mdl, container_handle)
                    ENDCODE
                }

                loadshape_name {
                    label = "LoadShape name"
                    widget = edit
                    type = generic
                    default_value = "Default"
                    group = "Time Series Settings"
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }

                loadshape_from_file {
                    label = "From CSV file"
                    widget = checkbox
                    type = generic
                    default_value = "False"
                    group = "Time Series Settings"
                    disabled
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }

                useactual {
                    label = "Actual value"
                    widget = checkbox
                    type = generic
                    default_value = "False"
                    group = "Time Series Settings"
                    nonvisible
                    disabled
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }

                loadshape_from_file_path {
                    label = "LoadShape from file - path"
                    widget = edit
                    type = generic
                    default_value = ""
                    group = "Time Series Settings"
                    nonvisible
                    no_evaluate
                }

                loadshape_from_file_column {
                    label = "LoadShape from file - column"
                    widget = edit
                    type = generic
                    default_value = "1"
                    group = "Time Series Settings"
                    nonvisible
                    no_evaluate
                }

                loadshape_from_file_header {
                    label = "LoadShape from file - header"
                    widget = checkbox
                    type = generic
                    default_value = "True"
                    group = "Time Series Settings"
                    nonvisible
                    no_evaluate
                }

                loadshape {
                    label = "LoadShape points"
                    widget = edit
                    type = generic
                    default_value = "[0.4, 0.3, 0.2, 0.2, 0.2, 0.2, 0.3, 0.5, 0.6, 0.7, 0.7, 0.8, 0.7, 0.7, 0.8, 0.8, 0.8, 1.0, 1.0, 1.0, 1.0, 0.9, 0.7, 0.5]"
                    unit = "pu"
                    group = "Time Series Settings"
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }

                loadshape_int {
                    label = "LoadShape interval"
                    widget = edit
                    type = generic
                    default_value = "1"
                    group = "Time Series Settings"
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_value(prop_handle, old_value)
                    ENDCODE
                }

                timespan {
                    label = "Loadshape time span"
                    widget = combo
                    combo_values = "Daily", "Yearly"
                    type = string
                    default_value = "Daily"
                    group = "Time Series Settings"
                    nonvisible
                    no_evaluate
                }

                T_Ts {
                    label = "LoadShape time range"
                    widget = edit
                    type = generic
                    default_value = "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]"
                    unit = "h"
                    group = "Time Series Settings"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.verify_time_loadshape_sizes(mdl, container_handle)
                    ENDCODE
                }

                T_mode {
                    label = "LoadShape input mode"
                    widget = combo
                    combo_values = "Loadshape index", "Time"
                    type = string
                    default_value = "Time"
                    group = "Time Series Settings"
                    no_evaluate

                    CODE property_value_edited
                        if new_value == "Time":
                            mdl.enable_property(mdl.prop(container_handle, "T_Ts"))
                        else:
                            mdl.disable_property(mdl.prop(container_handle, "T_Ts"))
                    ENDCODE
                }

                pct_stored {
                    label = "Initial SOC"
                    widget = edit
                    type = generic
                    default_value = "100"
                    unit = "%"
                }

                execution_rate {
                    label = "Execution rate"
                    widget = edit
                    type = generic
                    default_value = "100e-6"
                }

                vmaxpu {
                    label = "vmaxpu"
                    widget = edit
                    type = generic
                    default_value = "1.1"
                    nonvisible
                }

                vminpu {
                    label = "vminpu"
                    widget = edit
                    type = generic
                    default_value = "0.9"
                    nonvisible
                }

                kva {
                    label = "kva"
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                inv_r {
                    label = "AC-side resistance"
                    widget = edit
                    type = generic
                    default_value = "1e-5"
                    unit = "Ω"
                    group = "Inverter:4"
                }

                inv_l {
                    label = "AC-side inductance"
                    widget = edit
                    type = generic
                    default_value = "100e-6"
                    unit = "H"
                    group = "Inverter:4"
                }

                inv_rf {
                    label = "Filter resistance"
                    widget = edit
                    type = generic
                    default_value = "100e-3"
                    unit = "Ω"
                    group = "Inverter:4"
                }

                inv_cf {
                    label = "Filter capacitance"
                    widget = edit
                    type = generic
                    default_value = "1.013e-3"
                    unit = "F"
                    group = "Inverter:4"
                }

                inv_kp {
                    label = "Controller Kp"
                    widget = edit
                    type = generic
                    default_value = "0.0001"
                    group = "Inverter:4"
                }

                inv_ki {
                    label = "Controller Ki"
                    widget = edit
                    type = generic
                    default_value = "0.03"
                    group = "Inverter:4"
                }

                loadshape_n_points {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                enable_monitoring {
                    label = "Enable monitoring"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Monitoring:5"
                    no_evaluate
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.read_loadshape_from_json(mdl, item_handle)

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()

                ENDCODE

                CODE pre_compile
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.update_frequency_property(mdl, item_handle)
                    comp_script.restore_all_storages_points(mdl, item_handle)
                    # HEADER START
                    dispatch_p = mdl.get_property_value(mdl.prop(item_handle, "dispatch_p"))
                    dispatch_q = mdl.get_property_value(mdl.prop(item_handle, "dispatch_q"))
                    snap_status = mdl.get_property_value(mdl.prop(item_handle, "snap_status"))
                    kv = mdl.get_property_value(mdl.prop(item_handle, "kv"))
                    baseFreq = mdl.get_property_value(mdl.prop(item_handle, "baseFreq"))
                    kwrated = mdl.get_property_value(mdl.prop(item_handle, "kwrated"))
                    kwhrated = mdl.get_property_value(mdl.prop(item_handle, "kwhrated"))
                    chargetrigger = mdl.get_property_value(mdl.prop(item_handle, "chargetrigger"))
                    dischargetrigger = mdl.get_property_value(mdl.prop(item_handle, "dischargetrigger"))
                    pct_charge = mdl.get_property_value(mdl.prop(item_handle, "pct_charge"))
                    pct_discharge = mdl.get_property_value(mdl.prop(item_handle, "pct_discharge"))
                    pct_effcharge = mdl.get_property_value(mdl.prop(item_handle, "pct_effcharge"))
                    pct_effdischarge = mdl.get_property_value(mdl.prop(item_handle, "pct_effdischarge"))
                    kvar = mdl.get_property_value(mdl.prop(item_handle, "kvar"))
                    pf = mdl.get_property_value(mdl.prop(item_handle, "pf"))
                    pct_idlingkvar = mdl.get_property_value(mdl.prop(item_handle, "pct_idlingkvar"))
                    pct_idlingkw = mdl.get_property_value(mdl.prop(item_handle, "pct_idlingkw"))
                    pct_reserve = mdl.get_property_value(mdl.prop(item_handle, "pct_reserve"))
                    loadshape = mdl.get_property_value(mdl.prop(item_handle, "loadshape"))
                    pct_stored = mdl.get_property_value(mdl.prop(item_handle, "pct_stored"))
                    execution_rate = mdl.get_property_value(mdl.prop(item_handle, "execution_rate"))
                    vmaxpu = mdl.get_property_value(mdl.prop(item_handle, "vmaxpu"))
                    vminpu = mdl.get_property_value(mdl.prop(item_handle, "vminpu"))
                    kva = mdl.get_property_value(mdl.prop(item_handle, "kva"))
                    inv_r = mdl.get_property_value(mdl.prop(item_handle, "inv_r"))
                    inv_l = mdl.get_property_value(mdl.prop(item_handle, "inv_l"))
                    inv_rf = mdl.get_property_value(mdl.prop(item_handle, "inv_rf"))
                    inv_cf = mdl.get_property_value(mdl.prop(item_handle, "inv_cf"))
                    inv_kp = mdl.get_property_value(mdl.prop(item_handle, "inv_kp"))
                    inv_ki = mdl.get_property_value(mdl.prop(item_handle, "inv_ki"))

                    # HEADER STOP

                    comp_script.update_dispatch_int_comp(mdl, item_handle)
                    comp_script.update_mode_int_comp(mdl, item_handle)
                    comp_script.time_loadshape_preprocessing(mdl, item_handle)

                    comp_name = mdl.get_name(mdl.get_parent(item_handle))

                    try:
                        pf_value = mdl.get_property_value(mdl.prop(item_handle, "pf"))
                        float(pf_value) # test
                    except:
                        raise Exception(f"Invalid power factor value for component {comp_name}")

                    comp_script.calculate_kva(mdl, item_handle)
                ENDCODE

                CODE init
                    import importlib

                    import dss_thcc_lib.component_scripts.comp_storage as comp_script
                    importlib.reload(comp_script)
                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    comp_script.define_icon(mdl, item_handle)
                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE
            }
        }
        [
            position = 5168, 4256
            size = 64, 96
        ]

    }

}
