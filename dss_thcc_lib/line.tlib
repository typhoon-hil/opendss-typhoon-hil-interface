// Edit only the code, do not open and save from TSE.
// See the file "tse_component_edit.tlib" if you want to edit this component on TSE.
library "OpenDSS" {

    component Subsystem Root {

        component Subsystem Line {
            layout = static
            component "core/Transmission Line" TL {
                C_metric = "d_C"
                C_sequence_metric = "d_C"
                Frequency = "Fr"
                L_metric = "d_L"
                L_sequence_metric = "d_L"
                Length_metric = "Len"
                R_metric = "d_R"
                R_sequence_metric = "d_R"
                model = "PI"
                model_def = "Sequence"
                unit_sys = "metric"
            }
            [
                position = 7744, 8032
                size = 256, 72
            ]

            port A1 {
                position = -32, -32
                kind = pe
            }
            [
                position = 7512, 7976
                hide_name = True
            ]

            port B1 {
                position = -32, 0
                kind = pe
            }
            [
                position = 7512, 8032
                hide_name = True
            ]

            port C1 {
                position = -32, 32
                kind = pe
            }
            [
                position = 7512, 8088
                hide_name = True
            ]

            port A2 {
                position = 32, -32
                kind = pe
            }
            [
                position = 8008, 7936
                rotation = down
                hide_name = True
            ]

            port B2 {
                position = 32, 0
                kind = pe
            }
            [
                position = 8008, 8032
                rotation = down
                hide_name = True
            ]

            port C2 {
                position = 32, 32
                kind = pe
            }
            [
                position = 8008, 8128
                rotation = down
                hide_name = True
            ]

            port N {
                position = bottom left
                kind = pe
            }
            [
                position = 7728, 8144
            ]

            connect A1 TL.a_in as Connection1
            connect B1 TL.b_in as Connection2
            connect C1 TL.c_in as Connection3
            connect A2 TL.a_out as Connection4
            connect B2 TL.b_out as Connection5
            connect C2 TL.c_out as Connection6
            connect TL.gnd N as Connection7

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Line component.</p></body></html>"
                help_file = "help/OpenDSSManual.pdf#page=173"

                input_type {
                    label = "Parameter input"
                    widget = combo
                    combo_values = "Symmetrical", "Matrix", "LineCode"
                    type = string
                    default_value = "Symmetrical"
                    group = "Line Parameters:1"
                    no_evaluate

                    CODE property_value_changed
                        if new_value == "Symmetrical":
                            mdl.set_property_value(mdl.prop(container_handle, 'phases'), "3")
                            mdl.disable_property(mdl.prop(container_handle, "phases"))

                        if new_value == "Symmetrical":
                            mdl.set_property_disp_value(mdl.prop(container_handle, 'phases'), "3")
                            mdl.disable_property(mdl.prop(container_handle, "phases"))
                        else:
                            mdl.enable_property(mdl.prop(container_handle, "phases"))

                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.toggle_coupling(mdl, container_handle, created_ports)
                        mdl.refresh_icon(container_handle)

                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle)
                    ENDCODE
                }

                Load {
                    label = "Load parameters"
                    widget = button
                    type = generic
                    default_value = "Choose"
                    group = "Line Parameters"
                    no_evaluate

                    CODE button_clicked
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.load_line_parameters(mdl, container_handle)
                    ENDCODE
                }

                selected_object {
                    label = "Selected"
                    widget = edit
                    type = generic
                    default_value = ""
                    group = "Line Parameters"
                    no_evaluate

                    CODE property_value_edited
                        old_value = mdl.get_property_value(prop_handle)
                        mdl.set_property_disp_value(prop_handle, old_value)
                    ENDCODE
                }

                Length {
                    label = "Line Length"
                    widget = edit
                    type = generic
                    default_value = "100"
                    unit = "km"
                    group = "Line Parameters:1"
                }

                global_basefreq {
                    label = "Global base frequency"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    group = "Line Parameters"
                    no_evaluate

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle)
                    ENDCODE

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if old_value == new_value:
                            comp_script.update_frequency_property(mdl, container_handle, init=True)
                        else:
                            comp_script.update_frequency_property(mdl, container_handle)
                    ENDCODE
                }

                baseFreq {
                    label = "Base frequency"
                    widget = edit
                    type = generic
                    default_value = "60"
                    unit = "Hz"
                    group = "Line Parameters"
                    nonvisible
                }

                phases {
                    label = "Phases"
                    widget = combo
                    combo_values = "3", "2", "1"
                    type = string
                    default_value = "3"
                    group = "Line Parameters"
                    disabled
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle, caller_prop_handle=prop_handle)
                        comp_script.toggle_coupling(mdl, container_handle, created_ports)
                        comp_script.show_hide_param_phases(mdl, container_handle, new_value)
                        mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle)
                    ENDCODE
                }

                R1 {
                    label = "R1"
                    widget = edit
                    type = generic
                    default_value = "0.1903"
                    unit = "Ω/km"
                    group = "Line Parameters"
                }

                R0 {
                    label = "R0"
                    widget = edit
                    type = generic
                    default_value = "0.5853"
                    unit = "Ω/km"
                    group = "Line Parameters"
                }

                X1 {
                    label = "X1"
                    widget = edit
                    type = generic
                    default_value = "0.3957"
                    unit = "Ω/km"
                    group = "Line Parameters"
                }

                X0 {
                    label = "X0"
                    widget = edit
                    type = generic
                    default_value = "1.3278"
                    unit = "Ω/km"
                    group = "Line Parameters"
                }

                dC1 {
                    label = "C1"
                    widget = edit
                    type = generic
                    default_value = "11.155"
                    unit = "nF/km"
                    group = "Line Parameters"

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.toggle_coupling(mdl, container_handle, created_ports)

                    ENDCODE
                }

                dC0 {
                    label = "C0"
                    widget = edit
                    type = generic
                    default_value = "5.2493"
                    unit = "nF/km"
                    group = "Line Parameters"

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.toggle_coupling(mdl, container_handle, created_ports)

                    ENDCODE
                }

                rmatrix {
                    label = "Rmatrix"
                    widget = edit
                    type = string
                    default_value = "[[0.0981, 0.0401, 0.0401], [0.0401, 0.0981, 0.0401], [0.0401, 0.0401, 0.0981]]"
                    unit = "Ω/km"
                    group = "Line Parameters"
                    no_evaluate
                }

                xmatrix {
                    label = "Xmatrix"
                    widget = edit
                    type = string
                    default_value = "[[0.2153, 0.0947, 0.0947], [0.0947, 0.2153, 0.0947], [0.0947, 0.0947, 0.2153]]"
                    unit = "Ω/km"
                    group = "Line Parameters"
                    no_evaluate
                }

                cmatrix {
                    label = "Cmatrix"
                    widget = edit
                    type = string
                    default_value = "[[2.8, -0.6, -0.6], [-0.6, 2.8, -0.6], [-0.6, -0.6, 2.8]]"
                    unit = "nF/km"
                    group = "Line Parameters"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.toggle_coupling(mdl, container_handle,created_ports)

                    ENDCODE
                }

                obj_mode {
                    widget = edit
                    type = generic
                    default_value = ""
                    nonvisible
                    no_evaluate
                }

                Len {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                Fr {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                d_R {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                d_L {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                d_C {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                d_X {
                    widget = edit
                    type = generic
                    default_value = "0"
                    nonvisible
                }

                C1 {
                    widget = edit
                    type = generic
                    default_value = "12.74e-9"
                    nonvisible
                }

                C0 {
                    widget = edit
                    type = generic
                    default_value = "7.751e-9"
                    nonvisible
                }

                L1 {
                    widget = edit
                    type = generic
                    default_value = "99999"
                    nonvisible
                }

                L0 {
                    widget = edit
                    type = generic
                    default_value = "99999"
                    nonvisible
                }

                R1_one {
                    widget = edit
                    type = generic
                    default_value = "0.01"
                    nonvisible
                }

                L1_one {
                    widget = edit
                    type = generic
                    default_value = "0.01e-3"
                    nonvisible
                }

                C1_one {
                    widget = edit
                    type = generic
                    default_value = "0.1e-6"
                    nonvisible
                }

                coupling {
                    label = "Enable coupling"
                    widget = combo
                    combo_values = "None", "Core coupling", "Device coupling"
                    type = string
                    default_value = "None"
                    group = "Coupling:2"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        created_ports, _ = comp_script.port_dynamics(mdl, container_handle)
                        comp_script.toggle_coupling(mdl, container_handle, created_ports)

                    ENDCODE
                }

                enable_monitoring {
                    label = "Enable monitoring"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    group = "Monitoring"
                    no_evaluate
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.show_hide_param_inputs(mdl, item_handle, mdl.get_property_value(mdl.prop(item_handle, "input_type")))

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    mdl.set_ns_var("line_dialog_handler", dialog)
                    dialog.exec_()

                ENDCODE

                CODE pre_compile

                    # HEADER START
                    Length = mdl.get_property_value(mdl.prop(item_handle, "Length"))
                    R1 = mdl.get_property_value(mdl.prop(item_handle, "R1"))
                    R0 = mdl.get_property_value(mdl.prop(item_handle, "R0"))
                    dC1 = mdl.get_property_value(mdl.prop(item_handle, "dC1"))
                    dC0 = mdl.get_property_value(mdl.prop(item_handle, "dC0"))
                    Len = mdl.get_property_value(mdl.prop(item_handle, "Len"))
                    Fr = mdl.get_property_value(mdl.prop(item_handle, "Fr"))
                    d_R = mdl.get_property_value(mdl.prop(item_handle, "d_R"))
                    d_L = mdl.get_property_value(mdl.prop(item_handle, "d_L"))
                    d_C = mdl.get_property_value(mdl.prop(item_handle, "d_C"))
                    X1 = mdl.get_property_value(mdl.prop(item_handle, "X1"))
                    X0 = mdl.get_property_value(mdl.prop(item_handle, "X0"))
                    C1 = mdl.get_property_value(mdl.prop(item_handle, "C1"))
                    C0 = mdl.get_property_value(mdl.prop(item_handle, "C0"))
                    R1_one = mdl.get_property_value(mdl.prop(item_handle, "R1_one"))
                    L1_one = mdl.get_property_value(mdl.prop(item_handle, "L1_one"))
                    C1_one = mdl.get_property_value(mdl.prop(item_handle, "C1_one"))
                    coupling = mdl.get_property_value(mdl.prop(item_handle, "coupling"))
                    # HEADER STOP

                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.update_frequency_property(mdl, item_handle)
                    comp_script.configure_cable(mdl, item_handle)

                    L0_prop = mdl.prop(item_handle, "L0")
                    L1_prop = mdl.prop(item_handle, "L1")
                    L0 = mdl.get_property_value(L0_prop)
                    L1 = mdl.get_property_value(L1_prop)

                    if L0 == 99999:
                        # For old definition support workaround
                        mdl.set_property_value(L0_prop, 0)
                        mdl.set_property_value(L1_prop, 0)

                ENDCODE

                CODE model_loaded
                    L0_prop = mdl.prop(item_handle, "L0")
                    L1_prop = mdl.prop(item_handle, "L1")
                    X0_prop = mdl.prop(item_handle, "X0")
                    X1_prop = mdl.prop(item_handle, "X1")
                    baseFreq_prop = mdl.prop(item_handle, "baseFreq")

                    f = mdl.get_property_value(baseFreq_prop)
                    X0 = mdl.get_property_value(X0_prop)
                    X1 = mdl.get_property_value(X1_prop)
                    L0 = mdl.get_property_value(L0_prop)
                    L1 = mdl.get_property_value(L1_prop)

                    if X0 == 0 and X1 == 0:
                        if not L0 == 99999 and not L0 == 99999:
                            comp_name = mdl.get_name(mdl.get_parent(item_handle))
                            mdl.info(f"Old definition (inductance) detected on Line.{comp_name}. Converting to reactance.")
                            mdl.set_property_value(X0_prop, str(L0)+"*(2*np.pi*" + str(f) + ")")
                            mdl.set_property_value(X1_prop, str(L1)+"*(2*np.pi*" + str(f) + ")")

                ENDCODE

                CODE init
                    import importlib

                    import dss_thcc_lib.component_scripts.comp_line as comp_script
                    importlib.reload(comp_script)
                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    comp_script.define_icon(mdl, item_handle)

                    hil_device = mdl.core_model.configuration.hil_device
                    prop_handle = mdl.prop(item_handle, "coupling")
                    prop_combo_values = mdl.get_property_combo_values(prop_handle)
                    if hil_device not in ["HIL404", "HIL602+", "HIL604", "HIL606"]:
                        new_combo_values = ["None", "Core coupling"]
                    else:
                        new_combo_values = ["None", "Core coupling", "Device coupling"]
                    mdl.set_property_combo_values(prop_handle, new_combo_values)

                ENDCODE

                CODE configuration_changed
                    hil_device = mdl.core_model.configuration.hil_device
                    prop_handle = mdl.prop(item_handle, "coupling")
                    prop_combo_values = mdl.get_property_combo_values(prop_handle)
                    if hil_device not in ["HIL404", "HIL602+", "HIL604", "HIL606"]:
                        new_combo_values = ["None", "Core coupling"]
                    else:
                        new_combo_values = ["None", "Core coupling", "Device coupling"]
                    mdl.set_property_combo_values(prop_handle, new_combo_values)

                ENDCODE

                CODE define_icon
                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE
            }
        }
        [
            position = 4952, 4264
            size = 64, 112
        ]

    }

}
