// Edit only the code, do not open and save from TSE.
// See the file "tse_component_edit.tlib" if you want to edit this component on TSE.
library "OpenDSS" {

    component Subsystem Root {
        component Subsystem Bus {
            layout = static

            component Subsystem "Dummy Circuit" {
                layout = dynamic
                component "core/Open Circuit" "Open Circuit2" {
                }
                [
                    position = 8080, 8096
                    rotation = right
                    hide_name = True
                ]

                component "core/Resistor" R1 {
                }
                [
                    position = 7992, 8104
                    rotation = right
                ]

                port Conn {
                    position = bottom:auto
                    kind = pe
                }
                [
                    position = 8032, 8208
                    rotation = left
                ]

                junction Junction1 pe
                [
                    position = 8032, 8152
                ]

                connect "Open Circuit2.n_node" Junction1 as Connection12
                connect Junction1 Conn as Connection13
                [
                    breakpoints = 8032, 8152
                ]
                connect R1.n_node Junction1 as Connection14
                connect R1.p_node "Open Circuit2.p_node" as Connection15

                test = "999"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                    test {
                        label = "test"
                        widget = edit
                        type = generic
                        default_value = "0"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE
                }
            }
            [
                position = 8192, 7864
                size = 64, 72
            ]

            port A1 {
                position = -8, -48.0
                kind = pe
                direction =  in
            }
            [
                position = 7992, 7992
            ]

            port B1 {
                position = -8, -16.0
                kind = pe
                direction =  in
            }
            [
                position = 7992, 8192
            ]

            port C1 {
                position = -8, 16.0
                kind = pe
                direction =  in
            }
            [
                position = 7992, 8392
            ]

            port A2 {
                position = 8, -48.0
                kind = pe
                direction =  in
            }
            [
                position = 8392, 7992
                scale = -1, 1
            ]

            port B2 {
                position = 8, -16.0
                kind = pe
                direction =  in
            }
            [
                position = 8392, 8192
                scale = -1, 1
            ]

            port C2 {
                position = 8, 16.0
                kind = pe
                direction =  in
            }
            [
                position = 8392, 8392
                scale = -1, 1
            ]

            port N1 {
                position = -8, 48.0
                kind = pe
                direction =  in
            }
            [
                position = 7992, 8592
            ]

            port N2 {
                position = 8, 48.0
                kind = pe
                direction =  in
            }
            [
                position = 8392, 8592
                scale = -1, 1
            ]

            connect A1 A2 as Connection1
            connect B1 B2 as Connection2
            connect C1 C2 as Connection3
            connect N1 N2 as Connection4

            mask {
                description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">This component represents a Bus Circuit Element from the OpenDSS and should be connected between any other circuit elements. Terminals from different buses cannot be connected directly.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">For Typhoon HIL Toolchain purposes, the Bus Component has internal meters from which electrical measurements can be accessed. At this moment only the three-phase meter is available, thus, measurements are only available when the phases \'ABC\' are selected.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p></body></html>"

                sld_mode {
                    label = "Single-line representation"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_changed
                        import importlib
                        import dss_thcc_lib.component_scripts.comp_bus as comp_script
                        importlib.reload(comp_script)

                        if new_value != old_value:
                            comp_script.topology_dynamics(mdl, container_handle, prop_handle, new_value, old_value)
                        mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle, new_value)
                    ENDCODE
                }

                type_prop {
                    label = "Type"
                    widget = combo
                    combo_values = "ABC", "AB", "AC", "BC", "A", "B", "C", "ABCN", "ABN", "ACN", "BCN", "AN", "BN", "CN", "N"
                    type = string
                    default_value = "ABCN"
                    nonvisible
                    disabled
                    no_evaluate
                }

                phase_a {
                    label = "Phase A"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if new_value != old_value:
                            comp_script.topology_dynamics(mdl, container_handle, prop_handle, new_value, old_value)
                            mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle, new_value)
                    ENDCODE
                }

                phase_b {
                    label = "Phase B"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if new_value != old_value:
                            comp_script.topology_dynamics(mdl, container_handle, prop_handle, new_value, old_value)
                            mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle, new_value)
                    ENDCODE
                }

                phase_c {
                    label = "Phase C"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if new_value != old_value:
                            comp_script.topology_dynamics(mdl, container_handle, prop_handle, new_value, old_value)
                            mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle, new_value)
                    ENDCODE
                }

                phase_n {
                    label = "Phase N"
                    widget = checkbox
                    type = bool
                    default_value = "True"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if new_value != old_value:
                            comp_script.topology_dynamics(mdl, container_handle, prop_handle, new_value, old_value)
                            mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle, new_value)
                    ENDCODE
                }

                conf {
                    label = "Configuration"
                    widget = combo
                    combo_values = "on both sides", "on one side"
                    type = string
                    default_value = "on both sides"
                    no_evaluate

                    CODE property_value_changed
                        comp_script = return_comp_script(mdl, container_handle)
                        if new_value != old_value:
                            comp_script.topology_dynamics(mdl, container_handle, prop_handle, new_value, old_value)
                            mdl.refresh_icon(container_handle)
                    ENDCODE

                    CODE property_value_edited
                        comp_script = return_comp_script(mdl, container_handle)
                        comp_script.mask_dialog_dynamics(mdl, container_handle, prop_handle, new_value)
                    ENDCODE
                }

                second_side_is_multiline {
                    label = "Second side is multiline"
                    widget = checkbox
                    type = bool
                    default_value = "False"
                    no_evaluate

                    CODE property_value_changed
                        if new_value != old_value:
                            comp_script = return_comp_script(mdl, container_handle)
                            comp_script.topology_dynamics(mdl, container_handle, prop_handle, new_value, old_value)
                        mdl.refresh_icon(container_handle)
                    ENDCODE
                }

                library_version {
                    label = "OpenDSS library version number"
                    widget = edit
                    type = real
                    default_value = 0
                    nonvisible
                }

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                    comp_script = return_comp_script(mdl, item_handle)
                    comp_script.mask_dialog_dynamics(mdl, item_handle, "", "")

                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                ENDCODE

                CODE define_icon
                    import dss_thcc_lib.component_scripts.comp_bus as comp_script
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE

                CODE init
                    import importlib
                    import dss_thcc_lib.component_scripts.comp_bus as comp_script

                    importlib.reload(comp_script)
                    def return_comp_script(mdl, item_handle):
                        return comp_script

                    if _called_during_load:
                        comp_script.retro_compatibility(mdl, item_handle)
                    comp_script.update_library_version_info(mdl, item_handle)

                    comp_script.topology_dynamics(mdl, item_handle, prop_handle=None, new_value=_called_during_load, old_value="")
                    comp_script.define_icon(mdl, item_handle)
                ENDCODE
            }
        }
        [
            position = 4512, 4032
            size = 16, 32
        ]

    }

}